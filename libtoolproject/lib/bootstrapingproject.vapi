/* bootstrapingproject.vapi generated by valac 0.20.1, do not modify. */

namespace Bootstrapingproject {
	namespace Factories {
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public abstract class AbstractMain : GLib.Object {
			protected static bool DEBUG;
			protected static bool VERBOSE;
			protected Gtk.Application application;
			protected string build_pkg_data_dir;
			public static string dock_path;
			protected string exec_name;
			protected string program_name;
			protected const GLib.OptionEntry[] options;
			public AbstractMain ();
			protected virtual void create_controller ();
			protected virtual bool initialize_libraries (ref unowned string[] args);
			protected virtual void initialize_program ();
			protected virtual void initialize_services ();
			protected virtual bool parse_commandline (ref unowned string[] args);
			public virtual int run (ref unowned string[] args);
			protected virtual void set_options ();
			protected signal void initialized ();
		}
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public class Factory : GLib.Object {
			public static Bootstrapingproject.Factories.AbstractMain main;
			public Factory ();
			public static void init (Bootstrapingproject.Factories.AbstractMain main_class);
		}
	}
	namespace System {
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public class Logger : GLib.Object {
			public static void initialize (string app_name);
			public static void notification (string msg, string icon = "");
			public static void verbose (string msg, ...);
			public static Bootstrapingproject.System.LogLevel DisplayLevel { get; set; }
		}
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public class Paths : GLib.Object {
			public static bool ensure_directory_exists (GLib.File dir);
			public static void initialize (string app_name, string data_folder);
			public static GLib.File AppCacheFolder { get; protected set; }
			public static GLib.File AppConfigFolder { get; protected set; }
			public static GLib.File AppDataFolder { get; protected set; }
			public static GLib.File AppThemeFolder { get; protected set; }
			public static GLib.File CacheHomeFolder { get; protected set; }
			public static GLib.File ConfigHomeFolder { get; protected set; }
			public static Gee.ArrayList<GLib.File> DataDirFolders { get; protected set; }
			public static GLib.File DataFolder { get; protected set; }
			public static GLib.File DataHomeFolder { get; protected set; }
			public static GLib.File HomeFolder { get; protected set; }
			public static GLib.File ThemeFolder { get; protected set; }
		}
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public enum LogLevel {
			VERBOSE,
			DEBUG,
			INFO,
			NOTIFY,
			WARN,
			ERROR,
			FATAL
		}
	}
	namespace Widgets {
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public class CompositedWindow : Gtk.Window {
			public CompositedWindow ();
			public override bool draw (Cairo.Context cr);
			public CompositedWindow.with_type (Gtk.WindowType window_type);
		}
		[CCode (cheader_filename = "bootstrapingproject.h")]
		public class MainWindow : Gtk.Window {
			public MainWindow (Bootstrapingproject.MainController controller);
			public Bootstrapingproject.MainController controller { private get; construct; }
		}
	}
	[CCode (cheader_filename = "bootstrapingproject.h")]
	public class MainController : GLib.Object {
		public Bootstrapingproject.Widgets.MainWindow window;
		public MainController ();
	}
}
